#!/usr/bin/env ruby

require 'pastry'
require 'optparse'

options = {}
parser  = OptionParser.new do |opts|
  opts.banner = "pastry [options]"

  opts.on('-n', '--servers number',   'worker count')     {|value| options[:workers]    = value }
  opts.on('-E', '--environment name', 'rack environment') {|value| options[:env]        = value }
  opts.on('-R', '--rackup file',      'rackup file')      {|value| options[:rackup]     = value }
  opts.on('-a', '--address name',     'bind ip/host')     {|value| options[:host]       = value }
  opts.on('-p', '--port name',        'bind port')        {|value| options[:port]       = value }
  opts.on('-s', '--socket file',      'unix socket')      {|value| options[:unix]       = value }
  opts.on('-d', '--[no-]daemon',      'daemonize')        {|value| options[:daemonize]  = value }
  opts.on('-l', '--logfile file',     'logfile')          {|value| options[:logfile]    = value }
  opts.on('-P', '--pidfile file',     'pidfile')          {|value| options[:pidfile]    = value }
  opts.on('-c', '--connections num',  'max connections')  {|value| options[:maxconn]    = value }
  opts.on('-t', '--timeout secs',     'read timeout')     {|value| options[:timeout]    = value }
  opts.on('-A', '--application name', 'app name')         {|value| options[:name]       = value }
end

parser.parse!

%w(workers port maxconn timeout).map(&:to_sym).each do |name|
  options[name] = options[name].to_i if options.key?(name)
end

app  = Rack::Builder.parse_file(options.delete(:rackup) || 'config.ru').first
size = options.delete(:workers) || 2
env  = options.delete(:env)     || 'development'

ENV['RACK_ENV'] = env
Pastry.new(size, app, options).start
